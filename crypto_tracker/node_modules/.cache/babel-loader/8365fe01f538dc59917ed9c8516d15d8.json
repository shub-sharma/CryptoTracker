{"ast":null,"code":"var _jsxFileName = \"/home/shubham/Documents/work_files/side/CryptoTracker/crypto_tracker/src/components/market_overview/Market.js\";\nimport React, { Component } from 'react';\nimport DisplayCoins from './DisplayCoins';\nimport LoadingScreen from './LoadingScreen';\nimport axios from 'axios';\nexport default class Market extends Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n\n    this.addToPortfolio = ticker => {\n      const coinToAdd = this.state.coinList.filter(coin => {\n        return coin['ticker'] === ticker;\n      });\n      const prevPortfolio = this.state.portfolio.prevPortfolio;\n\n      for (let coin in prevPortfolio) {\n        if (coin['ticker'] === ticker) {\n          console.log('dont add');\n        }\n      }\n\n      let newPortfolio = [...this.state.portfolio, coinToAdd];\n      this.setState({\n        portfolio: newPortfolio\n      });\n    };\n\n    this.state = {\n      isLoaded: false,\n      coinList: null,\n      portfolio: []\n    };\n    this.getApiData = this.getApiData.bind(this);\n    this.fsyms = '';\n  }\n\n  componentDidMount() {\n    const jsonTopCoins = require('../Top100Coins.json');\n\n    const fsymsArr = [];\n    const coinArray = [];\n\n    for (let i = 0; i < jsonTopCoins.length; i++) {\n      coinArray.push({\n        ticker: jsonTopCoins[i]['symbol'],\n        fullName: jsonTopCoins[i]['name']\n      });\n      fsymsArr.push(jsonTopCoins[i]['symbol']);\n    }\n\n    this._isMounted = true;\n    this.setState({\n      coinList: coinArray\n    });\n    const fsyms = fsymsArr.join(',');\n    this.fsyms = fsyms;\n    this.getApiData();\n    setInterval(this.getApiData, 10000); // Caching limit is 10s.\n  }\n  /* Extract the info from the api and place it in this.state.coinList for rendering\n   *\n   */\n\n\n  getApiData() {\n    /* Build a list of all 100 coins and make an array of objects like so {'BTC': {fullName: 'Bitcoin'}, 'ETH': {fullName: 'Ethereum'}}} etc.\n     * I'll get all the keys and turn them into a string like so: 'BTC,ETH,LTC' etc. and append it to tsyms. This is all done in seperate function\n     and is this class's property.\n     */\n    const CRYPTO_COMPARE_URL = 'https://www.cryptocompare.com';\n    const url = 'https://min-api.cryptocompare.com/data/pricemultifull?fsyms=' + this.fsyms + '&tsyms=USD';\n    axios.get(url).then(res => {\n      if (this._isMounted) {\n        let coinData = res.data.DISPLAY;\n        const coinList = this.state.coinList;\n\n        for (let i = 0; i < coinList.length; i++) {\n          let coin = coinList[i]['ticker'];\n          coinList[i]['price'] = coinData[coin]['USD']['PRICE'];\n          coinList[i]['image'] = CRYPTO_COMPARE_URL + coinData[coin]['USD']['IMAGEURL'];\n          coinList[i]['percentDayChange'] = coinData[coin]['USD']['CHANGEPCTDAY'];\n        }\n\n        this.setState({\n          coinList: coinList,\n          isLoaded: true\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  displayData() {\n    if (this.state.coinList == null || !this.state.isLoaded) {\n      return React.createElement(LoadingScreen, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      });\n    } else {\n      // console.log(this.state.coinList);\n      return React.createElement(DisplayCoins, {\n        addToPortfolio: this.addToPortfolio,\n        coinList: this.state.coinList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      });\n    }\n  }\n\n  render() {\n    console.log(this.state.portfolio);\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"market-overview\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, this.displayData(), \";\"));\n  }\n\n}","map":{"version":3,"sources":["/home/shubham/Documents/work_files/side/CryptoTracker/crypto_tracker/src/components/market_overview/Market.js"],"names":["React","Component","DisplayCoins","LoadingScreen","axios","Market","constructor","props","_isMounted","addToPortfolio","ticker","coinToAdd","state","coinList","filter","coin","prevPortfolio","portfolio","console","log","newPortfolio","setState","isLoaded","getApiData","bind","fsyms","componentDidMount","jsonTopCoins","require","fsymsArr","coinArray","i","length","push","fullName","join","setInterval","CRYPTO_COMPARE_URL","url","get","then","res","coinData","data","DISPLAY","componentWillUnmount","displayData","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport DisplayCoins from './DisplayCoins'\nimport LoadingScreen from './LoadingScreen'\nimport axios from 'axios';\n\nexport default class Market extends Component {\n    _isMounted = false;\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            coinList: null,\n            portfolio: [],\n        }\n        this.getApiData = this.getApiData.bind(this);\n        this.fsyms = '';\n        \n    }\n\n\n        \n\n\n\n\n    componentDidMount() {\n        const jsonTopCoins = require('../Top100Coins.json');\n        const fsymsArr = []\n        const coinArray = []\n        for(let i = 0; i < jsonTopCoins.length; i++){\n            coinArray.push({\n                ticker: jsonTopCoins[i]['symbol'],\n                fullName: jsonTopCoins[i]['name'],\n            })\n            fsymsArr.push(jsonTopCoins[i]['symbol']);\n        }\n        this._isMounted = true;\n        this.setState({coinList: coinArray});\n        const fsyms = fsymsArr.join(',');\n        this.fsyms = fsyms;\n        this.getApiData();\n        setInterval(this.getApiData, 10000); // Caching limit is 10s.\n    }\n\n    /* Extract the info from the api and place it in this.state.coinList for rendering\n     *\n     */\n    getApiData() {\n        /* Build a list of all 100 coins and make an array of objects like so {'BTC': {fullName: 'Bitcoin'}, 'ETH': {fullName: 'Ethereum'}}} etc.\n         * I'll get all the keys and turn them into a string like so: 'BTC,ETH,LTC' etc. and append it to tsyms. This is all done in seperate function\n         and is this class's property.\n         */\n\n        const CRYPTO_COMPARE_URL = 'https://www.cryptocompare.com';\n        \n        const url = 'https://min-api.cryptocompare.com/data/pricemultifull?fsyms=' + this.fsyms +'&tsyms=USD'\n        axios.get(url)\n            .then(res => {\n                if(this._isMounted) {\n                    let coinData = res.data.DISPLAY;\n                    const {coinList} = this.state;\n                    for(let i = 0; i < coinList.length; i++) {\n                        let coin = coinList[i]['ticker'];\n                        coinList[i]['price'] = coinData[coin]['USD']['PRICE']\n                        coinList[i]['image'] = CRYPTO_COMPARE_URL + coinData[coin]['USD']['IMAGEURL'];\n                        coinList[i]['percentDayChange'] = coinData[coin]['USD']['CHANGEPCTDAY'];\n                    }\n                    this.setState({coinList: coinList, isLoaded: true});\n                }\n\n\n\n            })\n    \n    }\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n\n\n\n    addToPortfolio = (ticker) => {\n        const coinToAdd = this.state.coinList.filter(coin => {\n            return coin['ticker'] === ticker\n        })\n\n        const {prevPortfolio} = this.state.portfolio;\n        for(let coin in prevPortfolio) {\n            if (coin['ticker'] === ticker){\n                console.log('dont add');\n            }\n        }\n\n\n        let newPortfolio = [...this.state.portfolio, coinToAdd];\n        this.setState({portfolio: newPortfolio});\n\n\n\n        \n    }\n\n    \n    displayData() {\n        if(this.state.coinList == null || !this.state.isLoaded) {\n            return(<LoadingScreen />)\n        } else {\n            // console.log(this.state.coinList);\n            return(<DisplayCoins addToPortfolio={this.addToPortfolio} coinList={this.state.coinList}/>);\n        }\n    }\n    render() {\n\n        console.log(this.state.portfolio);\n        return (\n            <>\n                <div className=\"market-overview\">\n                    {this.displayData()};\n                </div>\n            </>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}