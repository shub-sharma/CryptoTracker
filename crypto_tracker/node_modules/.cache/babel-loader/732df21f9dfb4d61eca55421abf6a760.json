{"ast":null,"code":"var _jsxFileName = \"/home/shubham/Documents/work_files/side/CryptoTracker/crypto_tracker/src/components/market_overview/Market.js\";\nimport React, { Component } from 'react';\nimport DisplayCoins from './DisplayCoins';\nimport LoadingScreen from './LoadingScreen';\nimport axios from 'axios';\nexport default class Market extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addCrypto = (ticker, coinName, amountOfCoin, initialAmountBoughtWith) => {// const coinholdings = this.state.coinHoldings.filter() \n    };\n\n    this.state = {\n      isLoaded: false,\n      coinData: null,\n      coinList: null\n    };\n    this.getApiData = this.getApiData.bind(this);\n    this.fsyms = '';\n  }\n\n  componentDidMount() {\n    const jsonTopCoins = require('../Top100Coins.json');\n\n    const fsymsArr = [];\n    const coinArray = [];\n\n    for (let i = 0; i < jsonTopCoins.length; i++) {\n      coinArray.push({\n        ticker: jsonTopCoins[i]['symbol'],\n        fullName: jsonTopCoins[i]['name']\n      });\n      fsymsArr.push(jsonTopCoins[i]['symbol']);\n    }\n\n    this.setState({\n      coinList: coinArray\n    });\n    const fsyms = fsymsArr.join(',');\n    this.fsyms = fsyms;\n    this.getApiData(); // setInterval(this.getApiData, 10000); // Caching limit is 10s.\n  }\n  /* Extract the info from the api and place it in this.state.coinList for rendering\n   *\n   */\n\n\n  getApiData() {\n    /* Build a list of all 100 coins and make an array of objects like so {'BTC': {fullName: 'Bitcoin'}, 'ETH': {fullName: 'Ethereum'}}} etc.\n     * I'll get all the keys and turn them into a string like so: 'BTC,ETH,LTC' etc. and append it to tsyms. This is all done in seperate function\n     and is this class's property.\n     */\n    const CRYPTO_COMPARE_URL = 'https://www.cryptocompare.com';\n    const url = 'https://min-api.cryptocompare.com/data/pricemultifull?fsyms=' + this.fsyms + '&tsyms=USD';\n    console.log(url);\n    axios.get(url).then(res => {\n      // console.log(\"Display\" + res.data.DISPLAY);\n      let coinData = res.data.DISPLAY;\n      console.log(coinData);\n      const coinList = this.state.coinList;\n\n      for (let i = 0; i < coinList.length; i++) {\n        let coin = coinList[i]['ticker'];\n        coinList[i]['price'] = coinData[coin]['USD']['PRICE'];\n        coinList[i]['image'] = CRYPTO_COMPARE_URL + coinData[coin]['USD']['IMAGEURL'];\n        coinList[i]['percentDayChange'] = coinData[coin]['USD']['CHANGEPCTDAY'];\n      }\n\n      this.setState({\n        coinList: coinList,\n        isLoaded: true\n      });\n    });\n  }\n\n  displayData() {\n    if (this.state.coinList == null || !this.state.isLoaded) {\n      return React.createElement(LoadingScreen, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(DisplayCoins, {\n        addCrypto: this.addCrypto,\n        coinData: this.state.coinList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      });\n    }\n  }\n\n  render() {\n    // console.log(Object.keys(this.state.fsymsData));\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"market-overview\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, this.displayData(), \";\"));\n  }\n\n}","map":{"version":3,"sources":["/home/shubham/Documents/work_files/side/CryptoTracker/crypto_tracker/src/components/market_overview/Market.js"],"names":["React","Component","DisplayCoins","LoadingScreen","axios","Market","constructor","props","addCrypto","ticker","coinName","amountOfCoin","initialAmountBoughtWith","state","isLoaded","coinData","coinList","getApiData","bind","fsyms","componentDidMount","jsonTopCoins","require","fsymsArr","coinArray","i","length","push","fullName","setState","join","CRYPTO_COMPARE_URL","url","console","log","get","then","res","data","DISPLAY","coin","displayData","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport DisplayCoins from './DisplayCoins'\nimport LoadingScreen from './LoadingScreen'\nimport axios from 'axios';\n\nexport default class Market extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            coinData: null,\n            coinList: null,\n        }\n        this.getApiData = this.getApiData.bind(this);\n        this.fsyms = '';\n        \n    }\n\n\n        \n\n\n\n\n    componentDidMount() {\n        const jsonTopCoins = require('../Top100Coins.json');\n        const fsymsArr = []\n        const coinArray = []\n        for(let i = 0; i < jsonTopCoins.length; i++){\n            coinArray.push({\n                ticker: jsonTopCoins[i]['symbol'],\n                fullName: jsonTopCoins[i]['name'],\n            })\n            fsymsArr.push(jsonTopCoins[i]['symbol']);\n        }\n        this.setState({coinList: coinArray});\n        const fsyms = fsymsArr.join(',');\n        this.fsyms = fsyms;\n        this.getApiData();\n        // setInterval(this.getApiData, 10000); // Caching limit is 10s.\n    }\n\n    /* Extract the info from the api and place it in this.state.coinList for rendering\n     *\n     */\n    getApiData() {\n        /* Build a list of all 100 coins and make an array of objects like so {'BTC': {fullName: 'Bitcoin'}, 'ETH': {fullName: 'Ethereum'}}} etc.\n         * I'll get all the keys and turn them into a string like so: 'BTC,ETH,LTC' etc. and append it to tsyms. This is all done in seperate function\n         and is this class's property.\n         */\n\n        const CRYPTO_COMPARE_URL = 'https://www.cryptocompare.com';\n        \n        const url = 'https://min-api.cryptocompare.com/data/pricemultifull?fsyms=' + this.fsyms +'&tsyms=USD'\n        console.log(url);\n        axios.get(url)\n            .then(res => {\n                // console.log(\"Display\" + res.data.DISPLAY);\n                let coinData = res.data.DISPLAY;\n                console.log(coinData);\n                const {coinList} = this.state;\n                for(let i = 0; i < coinList.length; i++) {\n                    let coin = coinList[i]['ticker'];\n                    coinList[i]['price'] = coinData[coin]['USD']['PRICE']\n                    coinList[i]['image'] = CRYPTO_COMPARE_URL + coinData[coin]['USD']['IMAGEURL'];\n                    coinList[i]['percentDayChange'] = coinData[coin]['USD']['CHANGEPCTDAY'];\n                }\n                this.setState({coinList: coinList, isLoaded: true});\n\n\n\n\n            })\n    \n    }\n\n\n\n\n\n    addCrypto = (ticker, coinName, amountOfCoin, initialAmountBoughtWith) => {\n        // const coinholdings = this.state.coinHoldings.filter() \n    }\n\n    \n    displayData() {\n        if(this.state.coinList == null || !this.state.isLoaded) {\n            return(<LoadingScreen />)\n        } else {\n            return(<DisplayCoins addCrypto={this.addCrypto} coinData={this.state.coinList}/>);\n        }\n    }\n    render() {\n        // console.log(Object.keys(this.state.fsymsData));\n\n        return (\n            <>\n                <div className=\"market-overview\">\n                    {this.displayData()};\n                </div>\n            </>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}