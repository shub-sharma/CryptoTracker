{"ast":null,"code":"var _jsxFileName = \"/home/shubham/Documents/work_files/side/CryptoTracker/crypto_tracker/src/components/market_overview/Market.js\";\nimport React, { Component } from 'react';\nimport DisplayCoins from './DisplayCoins';\nimport LoadingScreen from './LoadingScreen';\nimport axios from 'axios';\nexport default class Market extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      coinList: null\n    };\n    this.getApiData = this.getApiData.bind(this);\n  }\n\n  componentDidMount() {\n    this.getApiData(); // setInterval(this.getApiData, 100000);\n  }\n\n  getApiData() {\n    const url = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD';\n    const apiKey = 'aff46362b8aef9ef13b86e6eb6c5e55bd01e664ed9cef2b0dffd71d37ae9add0';\n    const fullURL = url + '&api_key=' + apiKey;\n    let coinData = null;\n    axios.get(fullURL).then(res => {\n      console.log(res.data.Data);\n      this.setState({\n        isLoaded: true,\n        coinData: res.data.Data\n      });\n    });\n  }\n\n  getCoinList() {\n    const coins = coinData.map(coin => {\n      return {\n        name: coin.CoinInfo.Name,\n        fullName: coin.CoinInfo.FullName,\n        price: coin.DISPLAY.USD.PRICE\n      };\n    });\n    return coins;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, !this.state.coinList ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"loading..\") : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, Object.keys(this.state.coinList))));\n  } // render() {\n  //     return (\n  //         <div>\n  //             <div>\n  //                 {!this.state.coinList ? (\n  //                 <LoadingScreen />\n  //                  ) : ( \n  //                 <DisplayCoins coinData={this.state.coinList}/>\n  //                  )}\n  //             </div>\n  //         </div>\n  //     )\n  // }\n\n\n}","map":{"version":3,"sources":["/home/shubham/Documents/work_files/side/CryptoTracker/crypto_tracker/src/components/market_overview/Market.js"],"names":["React","Component","DisplayCoins","LoadingScreen","axios","Market","constructor","props","state","isLoaded","coinList","getApiData","bind","componentDidMount","url","apiKey","fullURL","coinData","get","then","res","console","log","data","Data","setState","getCoinList","coins","map","coin","name","CoinInfo","Name","fullName","FullName","price","DISPLAY","USD","PRICE","render","Object","keys"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,eAAe,MAAMC,MAAN,SAAqBJ,SAArB,CAA+B;AAE1CK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE,KADD;AAETC,MAAAA,QAAQ,EAAE;AAFD,KAAb;AAIA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACH;;AAMDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKF,UAAL,GADgB,CAEhB;AAGH;;AAEDA,EAAAA,UAAU,GAAG;AACT,UAAMG,GAAG,GAAG,yEAAZ;AACA,UAAMC,MAAM,GAAG,kEAAf;AACA,UAAMC,OAAO,GAAGF,GAAG,GAAG,WAAN,GAAoBC,MAApC;AACA,QAAIE,QAAQ,GAAG,IAAf;AACAb,IAAAA,KAAK,CAACc,GAAN,CAAUF,OAAV,EACKG,IADL,CACUC,GAAG,IAAI;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAJ,CAASC,IAArB;AACA,WAAKC,QAAL,CAAc;AACVhB,QAAAA,QAAQ,EAAE,IADA;AAEVQ,QAAAA,QAAQ,EAAEG,GAAG,CAACG,IAAJ,CAASC;AAFT,OAAd;AAKH,KARL;AAcH;;AACDE,EAAAA,WAAW,GAAG;AACV,UAAMC,KAAK,GAAGV,QAAQ,CAACW,GAAT,CAAcC,IAAD,IAAU;AACjC,aAAO;AACHC,QAAAA,IAAI,EAAED,IAAI,CAACE,QAAL,CAAcC,IADjB;AAEHC,QAAAA,QAAQ,EAAEJ,IAAI,CAACE,QAAL,CAAcG,QAFrB;AAGHC,QAAAA,KAAK,EAAEN,IAAI,CAACO,OAAL,CAAaC,GAAb,CAAiBC;AAHrB,OAAP;AAKH,KANa,CAAd;AAOA,WAAOX,KAAP;AACH;;AACDY,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,CAAC,KAAK/B,KAAL,CAAWE,QAAZ,GACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADC,GAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK8B,MAAM,CAACC,IAAP,CAAY,KAAKjC,KAAL,CAAWE,QAAvB,CADL,CAJT,CADJ,CADJ;AAaH,GAlEyC,CAoE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAhF0C","sourcesContent":["import React, { Component } from 'react'\nimport DisplayCoins from './DisplayCoins'\nimport LoadingScreen from './LoadingScreen'\nimport axios from 'axios';\nexport default class Market extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            coinList: null,\n        }\n        this.getApiData = this.getApiData.bind(this);\n    }\n\n\n\n\n\n    componentDidMount() {\n        this.getApiData();\n        // setInterval(this.getApiData, 100000);\n\n\n    }\n\n    getApiData() {\n        const url = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD';\n        const apiKey = 'aff46362b8aef9ef13b86e6eb6c5e55bd01e664ed9cef2b0dffd71d37ae9add0';\n        const fullURL = url + '&api_key=' + apiKey;\n        let coinData = null;\n        axios.get(fullURL)\n            .then(res => {\n                console.log(res.data.Data);\n                this.setState({\n                    isLoaded: true,\n                    coinData: res.data.Data,\n                    \n                })\n            })\n\n    \n\n\n\n    }\n    getCoinList() {\n        const coins = coinData.map((coin) => {\n            return {\n                name: coin.CoinInfo.Name,\n                fullName: coin.CoinInfo.FullName,\n                price: coin.DISPLAY.USD.PRICE,\n            }\n        })\n        return coins;\n    }\n    render() {\n        return (\n            <div>\n                <div>\n                    {!this.state.coinList ? (\n                    <p>loading..</p>\n                     ) : ( \n                         <div>\n                             {Object.keys(this.state.coinList)}\n                         </div>\n                     )}\n                </div>\n            </div>\n        )\n    }\n\n    // render() {\n    //     return (\n    //         <div>\n    //             <div>\n    //                 {!this.state.coinList ? (\n    //                 <LoadingScreen />\n    //                  ) : ( \n    //                 <DisplayCoins coinData={this.state.coinList}/>\n    //                  )}\n    //             </div>\n    //         </div>\n    //     )\n    // }\n}\n"]},"metadata":{},"sourceType":"module"}