{"ast":null,"code":"var _jsxFileName = \"/home/shubham/Documents/work_files/side/CryptoTracker/crypto_tracker/src/components/market_overview/Market.js\";\nimport React, { Component } from 'react';\nimport DisplayCoins from './DisplayCoins';\nimport LoadingScreen from './LoadingScreen';\nimport axios from 'axios';\nexport default class Market extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addCrypto = (ticker, coinName, amountOfCoin, initialAmountBoughtWith) => {// const coinholdings = this.state.coinHoldings.filter() \n    };\n\n    this.state = {\n      isLoaded: false,\n      coinData: null,\n      coinHoldings: []\n    };\n    this.getApiData = this.getApiData.bind(this); // this.fsyms = this.fsyms();\n  }\n\n  getFSYMS() {\n    // const cryptocurrencies = require('cryptocurrencies');\n    // const fsyms = cryptocurrencies.symbols().slice(0, 200).join(',');\n    // // const fsyms = cryptocurrencies.symbols().join(',');\n    // console.log(fsyms);\n    const url = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=100&tsym=USD';\n    fsymsData = null;\n    axios.get(url).then(res => {\n      console.log(res.data.Data);\n    });\n  }\n\n  componentDidMount() {\n    this.getApiData();\n    setInterval(this.getApiData, 10000); // Caching limit is 10s.\n  }\n  /* Extract the info from the api and place it in this.state.coinList for rendering\n   *\n   */\n\n\n  getApiData() {\n    const fsyms = 'BTC,ETH,XRP,BCH,LTC,USDT,BNB'; // this.getFSYMS();\n\n    const url = 'https://min-api.cryptocompare.com/data/pricemultifull?fsyms=' + fsyms + '&tsyms=USD';\n    const coinData = null;\n    axios.get(url).then(res => {\n      console.log(\"Display\" + res.data.DISPLAY);\n      coinData = res.data.DISPLAY;\n    });\n    console.log(coinData);\n    const coinList = [];\n\n    for (let coin in coinData) {\n      const tempCoin = coinData[coin]['USD'];\n      const newCoin = {\n        ticker: String(coin),\n        price: tempCoin['PRICE'],\n        image: CRYPTO_COMPARE_URL + tempCoin['IMAGEURL'],\n        percentDayChange: tempCoin['CHANGEPCTDAY']\n      };\n      coinList.push(newCoin);\n    } // console.log(coinList);\n    // this.setState({\n    //     isLoaded: true,\n    //     coinData: res.data.DISPLAY,\n    // })\n\n  }\n\n  displayData() {\n    if (!this.state.coinData || !this.state.isLoaded) {\n      return React.createElement(LoadingScreen, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(DisplayCoins, {\n        addCrypto: this.addCrypto,\n        coinData: this.state.coinData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"market-overview\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, this.displayData(), \";\"));\n  }\n\n}","map":{"version":3,"sources":["/home/shubham/Documents/work_files/side/CryptoTracker/crypto_tracker/src/components/market_overview/Market.js"],"names":["React","Component","DisplayCoins","LoadingScreen","axios","Market","constructor","props","addCrypto","ticker","coinName","amountOfCoin","initialAmountBoughtWith","state","isLoaded","coinData","coinHoldings","getApiData","bind","getFSYMS","url","fsymsData","get","then","res","console","log","data","Data","componentDidMount","setInterval","fsyms","DISPLAY","coinList","coin","tempCoin","newCoin","String","price","image","CRYPTO_COMPARE_URL","percentDayChange","push","displayData","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport DisplayCoins from './DisplayCoins'\nimport LoadingScreen from './LoadingScreen'\nimport axios from 'axios';\n\nexport default class Market extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            coinData: null,\n            coinHoldings: [],\n        }\n        this.getApiData = this.getApiData.bind(this);\n        // this.fsyms = this.fsyms();\n    }\n\n    getFSYMS() {\n        // const cryptocurrencies = require('cryptocurrencies');\n        // const fsyms = cryptocurrencies.symbols().slice(0, 200).join(',');\n        // // const fsyms = cryptocurrencies.symbols().join(',');\n        // console.log(fsyms);\n\n        const url = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=100&tsym=USD';\n        fsymsData = null;\n        axios.get(url)\n            .then(res => {\n                console.log(res.data.Data);\n            })\n\n        \n\n\n\n\n\n    }\n\n    componentDidMount() {\n        this.getApiData();\n        setInterval(this.getApiData, 10000); // Caching limit is 10s.\n    }\n\n    /* Extract the info from the api and place it in this.state.coinList for rendering\n     *\n     */\n    getApiData() {\n        const fsyms = 'BTC,ETH,XRP,BCH,LTC,USDT,BNB'\n        // this.getFSYMS();\n        const url = 'https://min-api.cryptocompare.com/data/pricemultifull?fsyms=' + fsyms +'&tsyms=USD'\n\n\n        const coinData = null;\n        axios.get(url)\n            .then(res => {\n                console.log(\"Display\" + res.data.DISPLAY);\n                coinData = res.data.DISPLAY;\n            })\n        console.log(coinData);\n        const coinList = [];\n        for(let coin in coinData) {\n            const tempCoin = coinData[coin]['USD']\n            const newCoin = {\n                ticker: String(coin),\n                price: tempCoin['PRICE'],\n                image: CRYPTO_COMPARE_URL + tempCoin['IMAGEURL'],\n                percentDayChange: tempCoin['CHANGEPCTDAY'],\n            }\n            coinList.push(newCoin);\n        }\n        // console.log(coinList);\n    \n        // this.setState({\n        //     isLoaded: true,\n        //     coinData: res.data.DISPLAY,\n            \n        // })\n    \n    }\n\n\n\n\n\n    addCrypto = (ticker, coinName, amountOfCoin, initialAmountBoughtWith) => {\n        // const coinholdings = this.state.coinHoldings.filter() \n    }\n\n    \n    displayData() {\n        if(!this.state.coinData || !this.state.isLoaded) {\n            return(<LoadingScreen />)\n        } else {\n            return(<DisplayCoins addCrypto={this.addCrypto} coinData={this.state.coinData}/>);\n        }\n    }\n    render() {\n        return (\n            <>\n                <div className=\"market-overview\">\n                    {this.displayData()};\n                </div>\n            </>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}