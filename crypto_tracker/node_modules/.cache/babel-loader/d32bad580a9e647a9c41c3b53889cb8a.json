{"ast":null,"code":"var _jsxFileName = \"/home/shubham/Documents/work_files/side/CryptoTracker/crypto_tracker/src/components/market_overview/Market.js\";\nimport React, { Component } from 'react';\nimport DisplayCoins from './DisplayCoins';\nimport LoadingScreen from './LoadingScreen';\nimport axios from 'axios';\nexport default class Market extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addCrypto = (ticker, coinName, amountOfCoin, initialAmountBoughtWith) => {// const coinholdings = this.state.coinHoldings.filter() \n    };\n\n    this.state = {\n      isLoaded: false,\n      coinData: null,\n      coinList: null\n    };\n    this.getApiData = this.getApiData.bind(this);\n    this.fsyms = '';\n  }\n\n  componentDidMount() {\n    const jsonTopCoins = require('../Top100Coins.json');\n\n    const fsymsArr = [];\n    const coinArray = [];\n\n    for (let i = 0; i < jsonTopCoins.length; i++) {\n      coinArray.push({\n        rank: jsonTopCoins[i]['rank'],\n        ticker: jsonTopCoins[i]['symbol'],\n        fullName: jsonTopCoins[i]['name']\n      });\n      fsymsArr.push(jsonTopCoins[i]['symbol']);\n    }\n\n    this.setState({\n      coinList: coinArray\n    });\n    const fsyms = fsymsArr.join(',');\n    this.fsyms = fsyms;\n    this.getApiData(); // setInterval(this.getApiData, 10000); // Caching limit is 10s.\n  }\n  /* Extract the info from the api and place it in this.state.coinList for rendering\n   *\n   */\n\n\n  getApiData() {\n    /* Build a list of all 100 coins and make an array of objects like so {'BTC': {fullName: 'Bitcoin'}, 'ETH': {fullName: 'Ethereum'}}} etc.\n     * I'll get all the keys and turn them into a string like so: 'BTC,ETH,LTC' etc. and append it to tsyms. This is all done in seperate function\n     and is this class's property.\n     */\n    const CRYPTO_COMPARE_URL = 'https://www.cryptocompare.com';\n    const MAX_CHAR_LIM = 10;\n    const url = 'https://min-api.cryptocompare.com/data/pricemultifull?fsyms=' + this.fsyms + '&tsyms=USD';\n    axios.get(url).then(res => {\n      // console.log(\"Display\" + res.data.DISPLAY);\n      let coinData = res.data.DISPLAY;\n      console.log(coinData);\n      const coinList = this.state.coinList;\n\n      for (let i = 0; i < coinList.length; i++) {\n        let coin = coinData[i]['ticker'];\n        console.log(coin); // coinList[i]['price'] = coinData[coin]['PRICE']\n\n        coinList[i]['image'] = CRYPTO_COMPARE_URL + coin['IMAGEURL'];\n        coinList[i]['percentDayChange'] = coin['CHANGEPCTDAY'];\n      }\n    }); // console.log(url);\n    // const coinList = [];\n    // for(let coin in coinData) {\n    //     const tempCoin = coinData[coin]['USD']\n    //     const newCoin = {\n    //         ticker: String(coin),\n    //         price: tempCoin['PRICE'],\n    //         image: CRYPTO_COMPARE_URL + tempCoin['IMAGEURL'],\n    //         percentDayChange: tempCoin['CHANGEPCTDAY'],\n    //     }\n    //     coinList.push(newCoin);\n    // }\n    // console.log(coinList);\n    // this.setState({\n    //     isLoaded: true,\n    //     coinData: res.data.DISPLAY,\n    // })\n  }\n\n  displayData() {\n    if (!this.state.coinData || !this.state.isLoaded) {\n      return React.createElement(LoadingScreen, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(DisplayCoins, {\n        addCrypto: this.addCrypto,\n        coinData: this.state.coinData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      });\n    }\n  }\n\n  render() {\n    // console.log(Object.keys(this.state.fsymsData));\n    console.log(this.state.coinList);\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"market-overview\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, this.displayData(), \";\"));\n  }\n\n}","map":{"version":3,"sources":["/home/shubham/Documents/work_files/side/CryptoTracker/crypto_tracker/src/components/market_overview/Market.js"],"names":["React","Component","DisplayCoins","LoadingScreen","axios","Market","constructor","props","addCrypto","ticker","coinName","amountOfCoin","initialAmountBoughtWith","state","isLoaded","coinData","coinList","getApiData","bind","fsyms","componentDidMount","jsonTopCoins","require","fsymsArr","coinArray","i","length","push","rank","fullName","setState","join","CRYPTO_COMPARE_URL","MAX_CHAR_LIM","url","get","then","res","data","DISPLAY","console","log","coin","displayData","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport DisplayCoins from './DisplayCoins'\nimport LoadingScreen from './LoadingScreen'\nimport axios from 'axios';\n\nexport default class Market extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            coinData: null,\n            coinList: null,\n        }\n        this.getApiData = this.getApiData.bind(this);\n        this.fsyms = '';\n        \n    }\n\n\n        \n\n\n\n\n    componentDidMount() {\n        const jsonTopCoins = require('../Top100Coins.json');\n        const fsymsArr = []\n        const coinArray = []\n        for(let i = 0; i < jsonTopCoins.length; i++){\n            coinArray.push({\n                rank: jsonTopCoins[i]['rank'],\n                ticker: jsonTopCoins[i]['symbol'],\n                fullName: jsonTopCoins[i]['name'],\n            })\n            fsymsArr.push(jsonTopCoins[i]['symbol']);\n        }\n        this.setState({coinList: coinArray});\n        const fsyms = fsymsArr.join(',');\n        this.fsyms = fsyms;\n        this.getApiData();\n        // setInterval(this.getApiData, 10000); // Caching limit is 10s.\n    }\n\n    /* Extract the info from the api and place it in this.state.coinList for rendering\n     *\n     */\n    getApiData() {\n        /* Build a list of all 100 coins and make an array of objects like so {'BTC': {fullName: 'Bitcoin'}, 'ETH': {fullName: 'Ethereum'}}} etc.\n         * I'll get all the keys and turn them into a string like so: 'BTC,ETH,LTC' etc. and append it to tsyms. This is all done in seperate function\n         and is this class's property.\n         */\n\n        const CRYPTO_COMPARE_URL = 'https://www.cryptocompare.com';\n        const MAX_CHAR_LIM = 10;\n        \n        const url = 'https://min-api.cryptocompare.com/data/pricemultifull?fsyms=' + this.fsyms +'&tsyms=USD'\n    \n        axios.get(url)\n            .then(res => {\n                // console.log(\"Display\" + res.data.DISPLAY);\n                let coinData = res.data.DISPLAY;\n                console.log(coinData);\n                const {coinList} = this.state;\n                for(let i = 0; i < coinList.length; i++) {\n                    let coin = coinData[i]['ticker']\n                    console.log(coin);\n                    // coinList[i]['price'] = coinData[coin]['PRICE']\n                    coinList[i]['image'] = CRYPTO_COMPARE_URL + coin['IMAGEURL'];\n                    coinList[i]['percentDayChange'] = coin['CHANGEPCTDAY'];\n                }\n\n\n\n\n            })\n        // console.log(url);\n        // const coinList = [];\n        // for(let coin in coinData) {\n        //     const tempCoin = coinData[coin]['USD']\n        //     const newCoin = {\n        //         ticker: String(coin),\n        //         price: tempCoin['PRICE'],\n        //         image: CRYPTO_COMPARE_URL + tempCoin['IMAGEURL'],\n        //         percentDayChange: tempCoin['CHANGEPCTDAY'],\n        //     }\n        //     coinList.push(newCoin);\n        // }\n        // console.log(coinList);\n    \n        // this.setState({\n        //     isLoaded: true,\n        //     coinData: res.data.DISPLAY,\n            \n        // })\n    \n    }\n\n\n\n\n\n    addCrypto = (ticker, coinName, amountOfCoin, initialAmountBoughtWith) => {\n        // const coinholdings = this.state.coinHoldings.filter() \n    }\n\n    \n    displayData() {\n        if(!this.state.coinData || !this.state.isLoaded) {\n            return(<LoadingScreen />)\n        } else {\n            return(<DisplayCoins addCrypto={this.addCrypto} coinData={this.state.coinData}/>);\n        }\n    }\n    render() {\n        // console.log(Object.keys(this.state.fsymsData));\n\n        console.log(this.state.coinList);\n        return (\n            <>\n                <div className=\"market-overview\">\n                    {this.displayData()};\n                </div>\n            </>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}