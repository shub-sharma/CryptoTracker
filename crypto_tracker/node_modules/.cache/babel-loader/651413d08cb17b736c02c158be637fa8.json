{"ast":null,"code":"var _jsxFileName = \"/home/shubham/Documents/work_files/side/CryptoTracker/crypto_tracker/src/components/market_overview/Market.js\";\nimport React, { Component } from 'react';\nimport DisplayCoins from './DisplayCoins';\nimport LoadingScreen from './LoadingScreen';\nimport axios from 'axios';\nexport default class Market extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addCrypto = (ticker, coinName, amountOfCoin, initialAmountBoughtWith) => {// const coinholdings = this.state.coinHoldings.filter() \n    };\n\n    this.state = {\n      isLoaded: false,\n      coinData: null,\n      coinList: null\n    };\n    this.getApiData = this.getApiData.bind(this);\n    this.tsyms = '';\n  } // getFSYMS() {\n  //     // const cryptocurrencies = require('cryptocurrencies');\n  //     // const fsyms = cryptocurrencies.symbols().slice(0, 200).join(',');\n  //     // // const fsyms = cryptocurrencies.symbols().join(',');\n  //     // console.log(fsyms);\n  //     const url = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=100&tsym=USD';\n  //     fsymsData = null;\n  //     axios.get(url)\n  //         .then(res => {\n  //             console.log(res.data.Data);\n  //         })\n  // // }\n  // async getFsymsData(){\n  //     const res = await axios.get('https://min-api.cryptocompare.com/data/top/mktcapfull?limit=100&tsym=USD');\n  //     const { fsymsData } = await res;\n  //     this.setState({fsymsData: fsymsData})\n  //   }\n\n\n  componentDidMount() {\n    const jsonTopCoins = require('../Top100Coins.json');\n\n    const tsymsArr = [];\n    const coinArray = [];\n\n    for (let i = 0; i < jsonTopCoins.length; i++) {\n      coinArray.push({\n        rank: jsonTopCoins[i]['rank'],\n        ticker: jsonTopCoins[i]['symbol'],\n        fullName: jsonTopCoins[i]['name']\n      });\n      tsymsArr.push(jsonTopCoins[i]['symbol']);\n    }\n\n    this.setState({\n      coinList: coinArray\n    });\n    const tsyms = tsymsArr.join(',');\n    this.tsyms = tsyms;\n    this.getApiData(); // setInterval(this.getApiData, 10000); // Caching limit is 10s.\n  }\n  /* Extract the info from the api and place it in this.state.coinList for rendering\n   *\n   */\n\n\n  getApiData() {\n    /* Build a list of all 100 coins and make an array of objects like so {'BTC': {fullName: 'Bitcoin'}, 'ETH': {fullName: 'Ethereum'}}} etc.\n     * I'll get all the keys and turn them into a string like so: 'BTC,ETH,LTC' etc. and append it to tsyms. This is all done in seperate function\n     and is this class's property.\n     */\n    // this.fsyms = () => {\n    //     const topHundredCoinsURL = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=100&tsym=USD'\n    //     let fsymsData = null;\n    //     axios.get(topHundredCoinsURL)\n    //         .then(res => {\n    //             this.setState({\n    //                 fsymsData: res.data.Data;\n    //             })\n    //         }) \n    // }\n    // const fsyms = 'BTC,ETH,XRP,BCH,LTC,USDT,BNB'\n    // // this.getFSYMS();\n    // const url = 'https://min-api.cryptocompare.com/data/pricemultifull?fsyms=' + fsyms +'&tsyms=USD'\n    // const coinData = null;\n    // axios.get(url)\n    //     .then(res => {\n    //         console.log(\"Display\" + res.data.DISPLAY);\n    //         coinData = res.data.DISPLAY;\n    //     })\n    // // console.log(coinData);\n    // const coinList = [];\n    // for(let coin in coinData) {\n    //     const tempCoin = coinData[coin]['USD']\n    //     const newCoin = {\n    //         ticker: String(coin),\n    //         price: tempCoin['PRICE'],\n    //         image: CRYPTO_COMPARE_URL + tempCoin['IMAGEURL'],\n    //         percentDayChange: tempCoin['CHANGEPCTDAY'],\n    //     }\n    //     coinList.push(newCoin);\n    // }\n    // console.log(coinList);\n    // this.setState({\n    //     isLoaded: true,\n    //     coinData: res.data.DISPLAY,\n    // })\n  }\n\n  displayData() {\n    if (!this.state.coinData || !this.state.isLoaded) {\n      return React.createElement(LoadingScreen, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(DisplayCoins, {\n        addCrypto: this.addCrypto,\n        coinData: this.state.coinData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      });\n    }\n  }\n\n  render() {\n    // console.log(Object.keys(this.state.fsymsData));\n    console.log(this.state.coinList);\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"market-overview\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, this.displayData(), \";\"));\n  }\n\n}","map":{"version":3,"sources":["/home/shubham/Documents/work_files/side/CryptoTracker/crypto_tracker/src/components/market_overview/Market.js"],"names":["React","Component","DisplayCoins","LoadingScreen","axios","Market","constructor","props","addCrypto","ticker","coinName","amountOfCoin","initialAmountBoughtWith","state","isLoaded","coinData","coinList","getApiData","bind","tsyms","componentDidMount","jsonTopCoins","require","tsymsArr","coinArray","i","length","push","rank","fullName","setState","join","displayData","render","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport DisplayCoins from './DisplayCoins'\nimport LoadingScreen from './LoadingScreen'\nimport axios from 'axios';\n\nexport default class Market extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            coinData: null,\n            coinList: null,\n        }\n        this.getApiData = this.getApiData.bind(this);\n        this.tsyms = '';\n        \n    }\n\n\n    // getFSYMS() {\n    //     // const cryptocurrencies = require('cryptocurrencies');\n    //     // const fsyms = cryptocurrencies.symbols().slice(0, 200).join(',');\n    //     // // const fsyms = cryptocurrencies.symbols().join(',');\n    //     // console.log(fsyms);\n\n    //     const url = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=100&tsym=USD';\n    //     fsymsData = null;\n    //     axios.get(url)\n    //         .then(res => {\n    //             console.log(res.data.Data);\n    //         })\n\n        \n\n\n\n\n\n    // // }\n    // async getFsymsData(){\n    //     const res = await axios.get('https://min-api.cryptocompare.com/data/top/mktcapfull?limit=100&tsym=USD');\n    //     const { fsymsData } = await res;\n    //     this.setState({fsymsData: fsymsData})\n    //   }\n\n    componentDidMount() {\n        const jsonTopCoins = require('../Top100Coins.json');\n        const tsymsArr = []\n        const coinArray = []\n        for(let i = 0; i < jsonTopCoins.length; i++){\n            coinArray.push({\n                rank: jsonTopCoins[i]['rank'],\n                ticker: jsonTopCoins[i]['symbol'],\n                fullName: jsonTopCoins[i]['name'],\n            })\n            tsymsArr.push(jsonTopCoins[i]['symbol']);\n        }\n        this.setState({coinList: coinArray});\n        const tsyms = tsymsArr.join(',');\n        this.tsyms = tsyms;\n        this.getApiData();\n        // setInterval(this.getApiData, 10000); // Caching limit is 10s.\n    }\n\n    /* Extract the info from the api and place it in this.state.coinList for rendering\n     *\n     */\n    getApiData() {\n        /* Build a list of all 100 coins and make an array of objects like so {'BTC': {fullName: 'Bitcoin'}, 'ETH': {fullName: 'Ethereum'}}} etc.\n         * I'll get all the keys and turn them into a string like so: 'BTC,ETH,LTC' etc. and append it to tsyms. This is all done in seperate function\n         and is this class's property.\n         */\n\n\n\n\n\n\n\n\n\n        // this.fsyms = () => {\n        //     const topHundredCoinsURL = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=100&tsym=USD'\n        //     let fsymsData = null;\n    \n        //     axios.get(topHundredCoinsURL)\n        //         .then(res => {\n        //             this.setState({\n        //                 fsymsData: res.data.Data;\n        //             })\n                        \n        //         }) \n        // }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        // const fsyms = 'BTC,ETH,XRP,BCH,LTC,USDT,BNB'\n        // // this.getFSYMS();\n        // const url = 'https://min-api.cryptocompare.com/data/pricemultifull?fsyms=' + fsyms +'&tsyms=USD'\n\n\n        // const coinData = null;\n        // axios.get(url)\n        //     .then(res => {\n        //         console.log(\"Display\" + res.data.DISPLAY);\n        //         coinData = res.data.DISPLAY;\n        //     })\n        // // console.log(coinData);\n        // const coinList = [];\n        // for(let coin in coinData) {\n        //     const tempCoin = coinData[coin]['USD']\n        //     const newCoin = {\n        //         ticker: String(coin),\n        //         price: tempCoin['PRICE'],\n        //         image: CRYPTO_COMPARE_URL + tempCoin['IMAGEURL'],\n        //         percentDayChange: tempCoin['CHANGEPCTDAY'],\n        //     }\n        //     coinList.push(newCoin);\n        // }\n        // console.log(coinList);\n    \n        // this.setState({\n        //     isLoaded: true,\n        //     coinData: res.data.DISPLAY,\n            \n        // })\n    \n    }\n\n\n\n\n\n    addCrypto = (ticker, coinName, amountOfCoin, initialAmountBoughtWith) => {\n        // const coinholdings = this.state.coinHoldings.filter() \n    }\n\n    \n    displayData() {\n        if(!this.state.coinData || !this.state.isLoaded) {\n            return(<LoadingScreen />)\n        } else {\n            return(<DisplayCoins addCrypto={this.addCrypto} coinData={this.state.coinData}/>);\n        }\n    }\n    render() {\n        // console.log(Object.keys(this.state.fsymsData));\n\n        console.log(this.state.coinList);\n        return (\n            <>\n                <div className=\"market-overview\">\n                    {this.displayData()};\n                </div>\n            </>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}